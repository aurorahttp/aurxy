#!/usr/bin/env php
<?php
/*
 * Aurxy
 */

require __DIR__ . '/vendor/autoload.php';

$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
socket_set_nonblock($socket);
socket_set_option($socket, SOL_SOCKET, SO_REUSEADDR, 1);
socket_bind($socket, '127.0.0.1', 10085);
socket_listen($socket);


set_error_handler(function ($errno, $errstr, $errfile, $errline) use ($socket) {
    echo "$errno: $errstr in $errfile on line $errline\n";
    socket_close($socket);
    exit(0);
});

set_exception_handler(function (\Throwable $exception) use ($socket){
    echo "{$exception->getMessage()}\n";
    socket_close($socket);
    exit(0);
});


$socketEv = new EvIo($socket, Ev::READ, function (EvIo $watcher) use ($socket) {
    try {
        $client = socket_accept($socket);
        $connection = new \Panlatent\Aurxy\Connection($client);
        $connection->handle();
    } catch (\Throwable $e) {
        echo $e->getMessage();
    }
});


$signalEv = new EvSignal(SIGKILL, function ($watcher) {
    /** @var EvSignal $watcher */
    echo "Kill me(kill)!\n";
    $watcher->stop();
    exit(0);
});

$signalEv = new EvSignal(SIGTERM, function ($watcher) use ($socket) {
    /** @var EvSignal $watcher */
    echo "Kill me(term)!\n";
    $watcher->stop();
    socket_close($socket);

    exit(0);
});



$fileWatcher = new EvStat(__FILE__, 5.0, function ($watcher) use ($socket) {
    /** @var EvStat $watcher */
//    $watcher->stop();
    echo "Script changed!\n";
//    socket_close($socket);
//    echo "Socket close!\n";
//    if (0 === ($pid = pcntl_fork())) {
//        echo "Update service!\n";
//        system('php ' . __FILE__);
//        exit(0);
//    } elseif ($pid === -1) {
//        echo "Update service failed!\n";
//    }
//    for (;;) {
//        pcntl_wait($status);
//        if (0 === pcntl_wexitstatus($status)) {
//            break;
//        }
//    }
//
//    exit(0);
});

Ev::run(Ev::FLAG_AUTO);
